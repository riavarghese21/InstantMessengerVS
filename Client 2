import java.net.*;
import java.io.*;

public class Client2 {
    private Socket socket;
    private BufferedReader serverReader;
    private BufferedReader userReader;
    private PrintWriter writer;

    public Client2(String ipAddress, int portNumber) throws UnknownHostException, IOException {
        socket = new Socket(ipAddress, portNumber);
        InetAddress localHost = InetAddress.getLocalHost();
        System.out.println("IP Address: " + localHost.getHostAddress());
        System.out.println("TCP Client 2 / Server are connected ");
        serverReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        userReader = new BufferedReader(new InputStreamReader(System.in));
        writer = new PrintWriter(socket.getOutputStream(), true);
    }

    // LOGIN
    public boolean login() throws IOException {
        System.out.print("Enter username: ");
        String username = userReader.readLine();
        System.out.print("Enter password: ");
        String password = userReader.readLine();

        if (username.equals("client2") && password.equals("password2")) {
            System.out.println("Login successful!");
            return true;
        } else {
            System.out.println("Invalid username or password.");
            return false;
        }
    }

    public void sendMessage(String message) {
        writer.println(message);
    }

    public String receiveMessage() throws IOException {
        return serverReader.readLine();
    }

    public static void main(String args[]) throws UnknownHostException, IOException {
        Client2 client2 = new Client2("localhost", 3066);
    
        // Create a new thread for continuously listening to incoming messages from the server
        new Thread(() -> {
            while (true) {
                try {
                    String message = client2.receiveMessage();
                    if (message != null) {
                        System.out.println(message);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }).start();

        if (!client2.login()) {
            System.exit(0);
        }
    
        String message;
        while (true) {
            System.out.println("Enter message, enter 'quit' to exit the program: ");
            message = client2.userReader.readLine();
            if (message.equals("quit")) {
                break;
            }
            client2.sendMessage("Message sent to Client 1: " + message);
        }
    }
}
